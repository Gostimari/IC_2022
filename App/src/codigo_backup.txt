 /* src/App.js */
import React, { useEffect, useState } from 'react'
import { Amplify, API, graphqlOperation } from 'aws-amplify'
import { createTodo } from './graphql/mutations'
import { getBoardZolertia1, listBoardZolertia1S, listTodos } from './graphql/queries'

import awsExports from "./aws-exports";

import { withAuthenticator, Button, Heading } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

Amplify.configure(awsExports);

const initialState = { name: '', description: '' }

const App = ({ signOut, user }) => {
  const [formState, setFormState] = useState(initialState)
  const [todos, setTodos] = useState([])

  useEffect(() => {
    fetchTodos()
  }, [])

  function setInput(key, value) {
    setFormState({ ...formState, [key]: value })
  }

  async function fetchTodos() {
    try {
      const todoData = await API.graphql(graphqlOperation(listBoardZolertia1S))
      const todos = todoData.data.listBoardZolertia1S.items
      setTodos(todos)
    } catch (err) { console.log('error fetching todos') }
  }

  async function addTodo() {
    try {
      if (!formState.name || !formState.description) return
      const todo = { ...formState }
      setTodos([...todos, todo])
      setFormState(initialState)
      await API.graphql(graphqlOperation(createTodo, {input: todo}))
    } catch (err) {
      console.log('error creating todo:', err)
    }
  }

  return (
    <>
    {
    <div style={styles.container}>
      <h2>myAgriculture</h2>
      <Heading level={1}>Hello {user.username}</Heading>

      <input
        onChange={event => setInput('name', event.target.value)}
        style={styles.input}
        value={formState.name}
        placeholder="Name"
      />
      <input
        onChange={event => setInput('description', event.target.value)}
        style={styles.input}
        value={formState.description}
        placeholder="Description"
      />
      <button style={styles.button} onClick={fetchTodos}>List Data</button>
      {
        todos.map((todo, index) => (
          <div key={todo.iteracao ? todo.Board : index} style={styles.todo}>
            <p style={styles.todoName}>{todo.Board}</p>
            <p style={styles.todoDescription}>{"Soil "}{todo.Soil}</p>
            <p style={styles.todoDescription}>{"Light "}{todo.Light}</p>
            <p style={styles.todoDescription}>{"uptime "}{todo.Uptime}</p>
          </div>
        ))
      }
    </div>
    }
    <Button onClick={signOut}>Sign out</Button>
    </>
  )
}

const styles = {
  container: { width: 400, margin: '0 auto', display: 'flex', flexDirection: 'column', justifyContent: 'center', padding: 20 },
  todo: {  marginBottom: 15 },
  input: { border: 'none', backgroundColor: '#ddd', marginBottom: 10, padding: 8, fontSize: 18 },
  todoName: { fontSize: 20, fontWeight: 'bold' },
  todoDescription: { marginBottom: 0 },
  button: { backgroundColor: 'black', color: 'white', outline: 'none', fontSize: 18, padding: '12px 0px' }
}

export default withAuthenticator(App);



from __future__ import print_function

import json
import boto3

mqtt = boto3.client('iot-data', region_name='eu-west-1')

def lambda_handler(event, context):

    new = event['description']

    print(event['description'])

    if (event['description'] == "1"):

        response = mqtt.publish(
            topic = 'cloud/action',
            qos=1,
            payload = json.dumps({"Rega": "Sim"})
        )

    else:
        response = mqtt.publish(
            topic = 'cloud/action',
            qos=1,
            payload = json.dumps({"Rega": "Nao"})
        )



    return {
        'statusCode': 200,
        'body': json.dumps('Published to topic')
    }


